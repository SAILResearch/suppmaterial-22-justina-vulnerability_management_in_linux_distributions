"""

Usage:
  debian.py fetch vuln_reports
  debian.py fetch bugs
  debian.py fetch pkgs
  debian.py fetch advisories
  
Options:
  -h --help     Show this screen.
  
"""


from docopt import docopt
import utils.tool as tool
import pandas, time, csv, os, re
from datetime import datetime
import debian.security_tracker_helper as security_tracker_helper
import debian.bug_helper as bug_helper
import debian.pkg_helper as pkg_helper
from dateutil import parser
import pytz
from selenium import webdriver
from dateutil import parser

RELEASE_CODE_NAMES = ["Buster", "Stretch", "Jessie"] 
ARCHIVE_RELEASE_CODE_NAMES = ["Wheezy", "Squeeze", "Lenny", "Etch", "Woody"]
SEVERITY_LIST = ["serious", "critical", "important", "grave"]
START_DATE = "2005-01-01 00:00:00"

def fetch_vuln_reports(args):
    temp_folder = "deb_temp/"
    if not os.path.exists(temp_folder):
        os.mkdir(temp_folder)

    sec_tracker_logs = pandas.read_csv("deb_sec_tracker.csv", index_col=None, header=0, delimiter='|')
    fieldnames = ['cve_id', 'commit_time', 'author_name', 'author_email', 'hash_code', 'ch_type', 'action']
    with open('debian_cve_awareness_times.txt', 'w+', newline='\n', encoding='utf8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';')
        writer.writeheader()
        for index, row in sec_tracker_logs.iterrows():
            os.system('cd security-tracker; git show '+row['hash']+' > ../'+temp_folder+'security-tracker-temp.txt; cd -')        
            with open(temp_folder+'security-tracker-temp.txt', 'r', newline='\n', encoding='latin-1') as rFile:
                bl_changes = False
                add_cve_ids = []
                add_cve_actions = {}
                remove_cve_actions = {}
                remove_cve_ids = []
                cve_counter = 0
                prv_cve_counter = 0
                cve_id = ""
                ch_type = ""
                pattern_cve_id = "^CVE-\d{4,5}-\d{4,7}"
                for line in rFile:
                    if line.startswith("diff --git a/data/CVE/list b/data/CVE/list"):
                        bl_changes = True
                    elif line.startswith("diff --git"):
                        bl_changes = False
                    if bl_changes:
                        if line.startswith("---") or line.startswith("+++"):
                            continue
                        if line.startswith("+") or line.startswith("-"):
                            ch_type = line[0:1]
                            line = line[1:].strip()
                            m = re.search(pattern_cve_id, line)
                            # print(cve_id, ch_type, cve_counter, prv_cve_counter, line)
                            if m is not None:
                                cve_counter += 1
                                cve_id = m.group()
                                if ch_type=="+":
                                    add_cve_ids.append(m.group())
                                else:
                                    remove_cve_ids.append(m.group())
                            elif cve_counter != prv_cve_counter:
                                if ch_type == "+":
                                    if cve_id not in add_cve_ids:
                                        add_cve_ids.append(cve_id)
                                    add_cve_actions[cve_id] = line
                                else:
                                    if cve_id not in remove_cve_ids:
                                        remove_cve_ids.append(cve_id)
                                    remove_cve_actions[cve_id] = line
                                prv_cve_counter = cve_counter
                            else:
                                cve_id = ""
                        elif re.search(pattern_cve_id, line.strip()) is not None:
                            # print(row['hash'],line)
                            m = re.search(pattern_cve_id, line.strip()) 
                            cve_counter += 1
                            cve_id = m.group()
                        # elif "CVE-" in line:
                        #     print(line)
                            
                rFile.close()

                add_cves = list(set(add_cve_ids) - set(remove_cve_ids))
                remove_cves = list(set(remove_cve_ids) - set(add_cve_ids))
                # if len(add_cve_ids)>0:
                #     print(row['hash'],len(add_cve_ids), len(remove_cve_ids), len(add_cves), len(remove_cves))
                for cc in add_cve_ids:
                    if cc not in add_cve_actions:
                        continue
                    if add_cve_actions[cc] == "RESERVED":
                        continue
                    ob = {}
                    ob['commit_time'] = row['commit_time']
                    ob['cve_id'] = cc
                    ob['author_name'] = row['author_name']
                    ob['author_email'] = row['author_email']
                    ob['hash_code'] = row['hash']
                    ob['action'] = add_cve_actions[cc]
                    ob['ch_type'] = "+"
                    writer.writerow(ob)
                
                for cc in remove_cve_ids:
                    if cc not in remove_cve_actions:
                        continue
                    if "RESERVED" in remove_cve_actions[cc]:
                        continue
                    ob = {}
                    ob['commit_time'] = row['commit_time']
                    ob['cve_id'] = cc
                    ob['author_name'] = row['author_name']
                    ob['author_email'] = row['author_email']
                    ob['hash_code'] = row['hash']
                    ob['action'] = remove_cve_actions[cc]
                    ob['ch_type'] = "-"
                    writer.writerow(ob)

                if index > 0 and index % 5000 == 0:
                    csvfile.flush()
                    print(datetime.now(), index, " lines passed ...")
                # break
        csvfile.close()


def fetch_bugs(args):
    if not os.path.exists('cve_info_from_nvd.csv'):
        print('ERRPR! The CVE file does not exist. Please download cve records ...')
        return

    # find mapping bug ids from the security tracker
    cve_records = pandas.read_csv("cve_info_from_nvd.csv", index_col=None, header=0, delimiter=';')
    fieldnames = ['cve_id', 'description', 'scope', 'severity', 'dist_id', 'references']
    with open('debian_cve_map_ids.csv', 'w+', newline='\n', encoding='utf8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';')
        writer.writeheader()

        for index, row in cve_records.iterrows():
            
            ob_arr = security_tracker_helper.fetch_cve_info(row['id'])
            # ob_arr = security_tracker_helper.fetch_cve_info('CVE-2018-7726')
            # print(ob_arr) 
            
            for ob in ob_arr:
                ob['cve_id'] = row['id']
                ob['scope'] = '' # useless
                writer.writerow(ob)
    csvfile.close()

    if not os.path.exists('debian_pkgs.csv'):
        print('ERRPR! The package file does not exist. Please download packages ...')
        return

    field_names = ['id', 'severity', 'summary','status','component','creation_time','creator', 'comp_category']
    pkgs = pandas.read_csv('debian_pkgs.csv', index_col=None, header=0, delimiter=';')
    with open("temp_debian_bug_list.csv", 'w+', newline='\n', encoding='utf8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=field_names, delimiter=';')
        writer.writeheader()
        
        # cnt = 0
        for index, row in pkgs.iterrows():
            ids = bug_helper.fetch_bug_list(row["name"])
            for bb in ids:
                if parser.parse(bb['creation_time']).astimezone(pytz.utc) < parser.parse(START_DATE).astimezone(pytz.utc):
                    continue
                bb['comp_category'] = row['pkg_category']
                writer.writerow(bb)
                # cnt+=1
            
            if index % 20 == 0:
                time.sleep(5)
            if index % 100 == 0 and index > 0:
                csvfile.flush()
                print(index, " rows passed...")
                time.sleep(60)
            # if cnt > 500:
            #     break
        csvfile.close()

    print("Done with downloading the list of bugs, starting to fetch bugs....")
    
    if not os.path.exists('debian_comments/'):
        os.mkdir('debian_comments')

    field_names = ['id','severity','status','creator','assigned_to','component','summary','creation_time','last_change_time','cf_last_closed', 'version']
    bug_list = pandas.read_csv("temp_debian_bug_list.csv", index_col=None, header=0, delimiter=';')
    with open('debian_bugs.csv', 'w+', newline='\n', encoding='utf8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=field_names, delimiter=';')
        writer.writeheader()
    
        for index, row in bug_list.iterrows():
            
            ob = bug_helper.fetch_bug(row["id"])
            if ob is None:
                print("Bug #", row["id"], " is not available")
                continue
            ob["id"] = row["id"]
            
            writer.writerow(ob)
            if index % 20 == 0:
                time.sleep(5)
            if index % 100 == 0 & index >0:
                csvfile.flush()
                time.sleep(60)
                
        csvfile.close()
    print("Done with fetching bugs....")
    os.system("rm temp_debian_bug_list.csv")
    
def fetch_pkgs(args):
    pkg_helper.fetch_pkg_list('temp_debian_pkgs.csv', ['name','desc'])

    field_names = ['name', 'pack_desc', 'upstream_url', 'pkg_category']
    projects = pandas.read_csv('temp_debian_pkgs.csv', index_col=None, header=0, delimiter=';')
    with open('debian_pkgs.csv', 'w+', newline='\n', encoding='utf8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=field_names, delimiter=';')
        writer.writeheader()

        for index, row in projects.iterrows():
            ob ={}
            pkgs = pkg_helper.fetch_package_detail(row["name"], RELEASE_CODE_NAMES, ARCHIVE_RELEASE_CODE_NAMES)
            has_upurl = False
            for pp in pkgs:
                if pp['url'] != "":
                    has_upurl = True
                # print(pp)
                ob["pkg_category"] = pp["subsection"]
                ob["name"] = row["name"]
                ob["pack_desc"] = pp["desc"]
                ob["upstream_url"] = pp["url"]
                if has_upurl:
                    break

            if len(pkgs) == 0:
                continue
            
            writer.writerow(ob)

            if index % 20 == 0:
                time.sleep(5)
            if index > 0 and index % 100 == 0:
                csvfile.flush()
                time.sleep(60)
        csvfile.close()
    os.system("rm temp_debian_pkgs.csv")

def fetch_advisories(args):
    fieldnames = ['cve_id', 'dsa_id', 'dsa_url']
    with open('debian_advisory_list.csv', 'w+', newline='\n', encoding='utf8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';')
        writer.writeheader()

        arrs = security_tracker_helper.fetch_security_advisory_list()
        writer.writerows(arrs)

    csvfile.close()

    projects = pandas.read_csv("debian_advisory_list.csv", index_col=None, header=0, delimiter=';')

    fieldnames = ['dsa_id','vulnerable','publish_date', 'affected_pkg']
    with open("debian_advisories.csv", 'w+', newline='\n', encoding='utf8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';')
        writer.writeheader()

        for index, row in projects.iterrows():
            ob = security_tracker_helper.fetch_advisory(row['dsa_url'])
            ob['dsa_id'] = row['dsa_id']
            writer.writerow(ob)

            
            if index % 1000 == 0 and index > 0:
                csvfile.flush()
                print("Passing advisories:", index, "...", datetime.now())
           
    csvfile.close()
    os.system("rm debian_advisory_list.csv")


if __name__== "__main__":

    args = docopt(__doc__)
    

    if bool(args['fetch']) and bool(args['pkgs']):
        fetch_pkgs(args)
    elif bool(args["fetch"]) and bool(args['bugs']):
        fetch_bugs(args)
    elif bool(args["fetch"]) and bool(args['vuln_reports']):
        fetch_vuln_reports(args)
    elif bool(args["fetch"]) and bool(args['advisories']):
        fetch_advisories(args)
        