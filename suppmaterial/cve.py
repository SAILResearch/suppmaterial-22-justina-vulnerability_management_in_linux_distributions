"""

Usage:
  cve.py fetch cve

Options:
  -h --help     Show this screen.
  
"""


import requests
import gzip
from docopt import docopt
import utils.tool as tool
import os, pandas, csv
from datetime import datetime
import cve.nvd_helper as nvd_helper

def fetch_cve(args):
    cve_folder = "cve_records/"
    if not os.path.exists(cve_folder):
        os.mkdir(cve_folder)

    # download json gz files from NVD
    for i in range(2007, 2020):
        url = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-%d.json.gz" % i
        print(url)

        fname = url.split("/")[-1]
        with open(cve_folder+fname, "wb") as rf:
            r = requests.get(url)
            rf.write(r.content)
        rf.close()

        with open(cve_folder+fname, 'rb') as inf, open(cve_folder+fname.replace(".gz",""), 'w', encoding='utf8') as tof:
            decom_str = gzip.decompress(inf.read()).decode('utf-8')
            tof.write(decom_str)
        tof.close()
        inf.close()

        os.remove(cve_folder+fname)

    # parse json files and extract data fields to a csv file
    fieldnames = ['id', 'cwes', 'published_date', 'last_modified_date', 'cvssV3_exploitabilityScore', 'cvssV3_impactScore', 'cvssV3_attackVector', 'cvssV3_attackComplexity', 'cvssV3_privilegesRequired', 'cvssV3_userInteraction', 'cvssV3_scope', 'cvssV3_confidentialityImpact', 'cvssV3_integrityImpact', 'cvssV3_availabilityImpact', 'cvssV3_baseScore', 'cvssV3_baseSeverity', 'cvssV2_severity', 'cvssV2_exploitabilityScore', 'cvssV2_impactScore', 'cvssV2_acInsufInfo', 'cvssV2_obtainAllPrivilege', 'cvssV2_obtainUserPrivilege', 'cvssV2_obtainOtherPrivilege', 'cvssV2_userInteractionRequired', 'cvssV2_accessVector', 'cvssV2_accessComplexity', 'cvssV2_authentication', 'cvssV2_confidentialityImpact', 'cvssV2_integrityImpact', 'cvssV2_availabilityImpact', 'cvssV2_baseScore']
    with open('cve_info_from_nvd.csv', 'w+', newline='\n', encoding='utf8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';')
        writer.writeheader()

        for file in os.listdir(cve_folder):
            ob = nvd_helper.read_cve_info(cve_folder+file)
            writer.writerows(ob)
            os.remove(cve_folder+file)
        os.remove(cve_folder)
    csvfile.close()
    
if __name__== "__main__":
    
    args = docopt(__doc__)

    if bool(args["fetch"]):
        fetch_cve(args)
        